# Branches are pointers

Assumptions for today:
- we'll still work locally only (remote is a thing that comes later)
    - I have switched exercises to not "live" on this repository for this one. You're supposed to use your own fresh local repository for it :)
- we're using git in a "nonstandard"/extreme way and try to mess with it, in order to understand the concepts independent of each other
- I will try to do it in a more interactive manner today. I'll show things and you can follow along :) (I recommend following along, s.t. you have the right setup for the exercises)

## Preparation steps. Set up our repository.

% mkdir repo-2023-08-25
% cd repo-2023-08-25
% git init

# create first commit
% touch README && git add README && git commit -m "first commit"
% echo "# headline" >> README && git commit -am "second commit"
% echo "\nproject description" >> README && git commit -am "third commit"

## Concept 1: everything is tracked in `.git`
you can do this magic trick where you delete the whole content of your repository.
as long as
- the `.git` directory survives
- and the files you're deleting are committed
you're fine!

% ls
README

# confirm that all your files/changes are committed. "working tree clean"
% git status
On branch main
nothing to commit, working tree clean

# delete the working tree
% rm *

% ls
% git status
% git log
# restore the working tree
% git restore .

### Corrollary: branches are tracked in `.git`
- HEAD is a pointer to a branch
- a branch is a pointer to a commit

% ls .git

# there are lots of things. Today we'll focus on `HEAD` and `refs`
% cat .git/HEAD
ref: refs/heads/main
% ls .git/refs/heads
main
% cat .git/refs/heads/main
6c3581dfadd1bbb8edca267fb310f4b5aad931cb
% touch hello.txt && git add hello.txt && git commit -m "add hello.txt"
% cat .git/refs/heads/main
bbcb7b6db784564bfb490f8faa57ae522a6b92cc
% git log -2
commit bbcb7b6db784564bfb490f8faa57ae522a6b92cc (HEAD -> main)
Author: Moritz Neeb <nt4u@kpvn.de>
Date:   Fri Aug 25 13:10:13 2023 -0400

    add hello.txt

commit 6c3581dfadd1bbb8edca267fb310f4b5aad931cb
Author: Moritz Neeb <nt4u@kpvn.de>
Date:   Fri Aug 25 12:58:11 2023 -0400

    third commit


## Concept: different levels of abstractions in git
- some commands are affecting only single operations and lower levels (~"plumbing")
- some are "user friendly" but do "magic" under the hood (~"porcelain")
- some commands affect branches, some commands affect HEAD, some commands create commits

example, in the concept of branches:
- `git branch <name>` just creates a new branch pointer to the current commit
- `git switch <branch` changes HEAD to new branch and updates working directory
- `git commit` does multiple things:
    - creates the commit
    - moves branch to new commit, moves HEAD to new commit
- `git checkout` only touches the HEAD, regardless of the branch
    - does many things, dependent on how you use it
    - we can use with `git checkout HASH`, then we go a bare commit ("detached HEAD")
    - we can use with `git checkout main`, then we put HEAD to main
- `git reset` touches the HEAD, it's branch and dependent on the options, the working directory + staging area


## Concept: Detached head state

We've talked about this. I might explain it at some point in writing. :D

## Scenarios

### "WIP commit"

We've talked about this. I might explain it at some point in writing. Double WIP! :D


## Exercises

### Create a few branches
With only using git commands (do not modify the filesystem yourself), make the refs/heads look like this:

% ls .git/refs/heads
a  b  c  d  main

### Drop them again

hint: git branch -d

### The difference between git branch -d and -D

Run the following for preparation of this exercise:
% git switch -c tobekept
% echo "change" >> README && git commit -am "initial exercise commit"
% git branch tobedeleted1
% git switch -c tobedeleted2
% echo "change" >> README && git commit -am "a new commit"
% git branch tobekept2
% git switch tobekept

Then
% git log --pretty=oneline --abbrev-commit tobekept2 -2
should look like (with different hashes):
114c39b (tobekept2, tobedeleted2) a new commit
bb1e858 (HEAD -> tobekept, tobedeleted1) initial exercise commit

(note, for later, that we're looking at the log of tobekept2,
but our HEAD is on tobekept)

Now delete tobedeleted1:
% git branch -d tobedeleted1
Deleted branch tobedeleted1 (was ef01077).

Then try to delete tobedeleted2:
% git branch -d tobedeleted2
error: The branch 'tobedeleted2' is not fully merged.
If you are sure you want to delete it, run 'git branch -D tobedeleted2'.

It complains "it's not fully merged". Okay, let's do something that looks like merging to git (??? :D)
% git switch tobekept2

% git log --pretty=oneline --abbrev-commit tobekept2 -2
cdc361e (HEAD -> tobekept2, tobedeleted2) a new commit
ef01077 (tobekept) initial exercise commit

Then deleting #2 works:
% git branch -d tobedeleted2

What happened here?
- git branch -d only works, if the branchname is somehow "reachable" from our current HEAD. It tries to be helpful, but saying "it's not merged". What it means is, that it's not merged to the current active branch (that HEAD points to).
- in the deletion of tobedeleted1, it was reachable (it was the same commit as HEAD)
- in the deletion of tobedeleted2, it was not reachable from HEAD (it only searches "downwards")
- then we moved head to the other branch => it worked!

### moving pointers without using git

Now we're doing the opposite:
- in a toy (!) repository of your choice, try manually editing the files that we've seen
    - what happens if you edit `.git/HEAD` and put another branch name (it better exists, but of course try nonexisting ones too)
    - edit `.git/refs/head/new-branch` and put another hash of the history.
      - If you want to be careful, make sure you're saving the initial hash.
- what would you do to replicate the behavior of `git reset @^ --soft`?

Hint: use `git log HEAD` or `git log <branchname>` to verify your assumptions.
observation: this manual branch/HEAD moving will not update the working directory, so git status might be confusing. The working directory will stay in whichever state you started with.
